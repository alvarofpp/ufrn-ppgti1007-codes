/*
 * generated by Xtext 2.25.0
 */
grammar InternalMyDSL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.ppgti.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.ppgti.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.ppgti.mydsl.services.MyDSLGrammarAccess;

}

@parser::members {

 	private MyDSLGrammarAccess grammarAccess;

    public InternalMyDSLParser(TokenStream input, MyDSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Pessoas";
   	}

   	@Override
   	protected MyDSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRulePessoas
entryRulePessoas returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPessoasRule()); }
	iv_rulePessoas=rulePessoas
	{ $current=$iv_rulePessoas.current; }
	EOF;

// Rule Pessoas
rulePessoas returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getPessoasAccess().getBaseDadosPessoaParserRuleCall_0());
			}
			lv_baseDados_0_0=rulePessoa
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getPessoasRule());
				}
				add(
					$current,
					"baseDados",
					lv_baseDados_0_0,
					"org.ppgti.mydsl.MyDSL.Pessoa");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRulePessoa
entryRulePessoa returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPessoaRule()); }
	iv_rulePessoa=rulePessoa
	{ $current=$iv_rulePessoa.current; }
	EOF;

// Rule Pessoa
rulePessoa returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Pessoa'
		{
			newLeafNode(otherlv_0, grammarAccess.getPessoaAccess().getPessoaKeyword_0());
		}
		(
			(
				lv_nome_1_0=RULE_ID
				{
					newLeafNode(lv_nome_1_0, grammarAccess.getPessoaAccess().getNomeIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPessoaRule());
					}
					setWithLastConsumed(
						$current,
						"nome",
						lv_nome_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				lv_sobrenome_2_0=RULE_ID
				{
					newLeafNode(lv_sobrenome_2_0, grammarAccess.getPessoaAccess().getSobrenomeIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPessoaRule());
					}
					setWithLastConsumed(
						$current,
						"sobrenome",
						lv_sobrenome_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getPessoaAccess().getSemicolonKeyword_3());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
